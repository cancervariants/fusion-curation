import { React, useState } from 'react';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { makeStyles } from '@material-ui/core/styles';
import FormRadio from './FormRadio';
import CausEventForm from './CausEventForm';
import FunctionalDomainsForm from './FunctionalDomainsForm';
import SubmitButton from './SubmitButton';
import ResponseField from './ResponseField';
import ComponentsForm from './ComponentsForm';

const useStyles = makeStyles({
  root: {
    width: '100%',
    maxWidth: 500,
  },
});

const FormParent = () => {
  // visibility handlers
  const [showRfPreserved, setShowRfPreserved] = useState(false);
  const [showFuncDomains, setShowFuncDomains] = useState(false);
  const [showComponents, setShowComponents] = useState(false);
  const [showCausEvent, setShowCausEvent] = useState(false);
  const [showCausEventInfo, setShowCausEventInfo] = useState(false);
  const [showSubmit, setShowSubmit] = useState(false);
  const [showResponse, setShowResponse] = useState(false);

  // form value handlers
  const [proteinCodingValue, setProteinCodingValue] = useState('');
  const [rfPreserved, setRfPreserved] = useState('');
  const [retainedDomains, setRetainedDomains] = useState(''); // TODO switch to array
  const [retainedDomainsGenes, setRetainedDomainGenes] = useState(''); // TODO switch to array
  const [components, setComponents] = useState([]);
  const [causEvent, setCausEvent] = useState('');
  const [responseJSON, setResponseJSON] = useState('');
  const [responseHuman, setResponseReadable] = useState('');

  // styles
  const classes = useStyles();

  /**
   * Handle result of "protein coding" decision. Make child elements visible or invisible.
   * @param {string} oldValue value of previous selection
   * @param {*} newValue newly selected value
   * @returns nothing, but updates state of child elements accordingly
   */
  const handleSetProteinCoding = (oldValue, newValue) => {
    if (oldValue !== newValue) {
      setProteinCodingValue(newValue);
      if (newValue === 'Yes') {
        setShowFuncDomains(false);
        setShowRfPreserved(true);
      } else if (newValue === 'No' || newValue === 'Unknown') {
        setShowRfPreserved(false);
        setShowFuncDomains(false);
        setShowFuncDomains(true);
        setShowCausEvent(true);
      }
    }
  };

  /**
   * Handle result of "read frame preserved" decision. Make child elements visible or invisible.
   * @param {string} oldValue value of previous selection
   * @param {*} newValue newly selected value
   * @returns nothing, but updates state of child elements accordingly
   */
  const handleSetRfPreserved = (oldValue, newValue) => {
    if (oldValue !== newValue) {
      setRfPreserved(newValue);
      if (newValue === 'Yes') {
        setShowFuncDomains(true);
        setShowComponents(true);
        setShowCausEvent(true);
      } else if (newValue === 'No') {
        setShowFuncDomains(false);
        setShowComponents(true);
        setShowCausEvent(true);
      }
    }
  };

  /**
   * Handle result of "causative event known" decision. Make child elements visible or invisible.
   * @param {string} oldValue value of previous selection
   * @param {*} newValue newly selected value
   * @returns nothing, but updates state of child elements accordingly
   */
  const handleSetCausEvent = (oldValue, newValue) => {
    if (oldValue !== newValue) {
      setCausEvent(newValue);
      if (newValue === 'Yes') {
        setShowCausEventInfo(true);
        setShowSubmit(true);
      } else if (newValue === 'No') {
        setShowCausEventInfo(false);
        setShowSubmit(true);
      } else {
        setShowCausEventInfo(false);
        setShowSubmit(false);
      }
    }
  };

  /**
   * Transform computable fusion object into human-readable string
   * Uses 'hgvs-like' syntax, eg:
   *  NM_152263.2(EPCAM):exon5::NM_002609.3(MSH2):exon2
   *  NM_162263.2(TPM3):exon8::NM_002609.3(PDGFRB):exon11
   * TODO
   *  * 'long form' syntax handling
   * @param {Object} outputJSON fusion object generated by handleSubmit()
   * @return {string} fusion object structured as human-readable string
   */
  const outputToReadable = (outputJSON) => {
    if (outputJSON.junctions) {
      const end5 = outputJSON.junctions['5_prime_end'];
      const end3 = outputJSON.junctions['3_prime_end'];
      if (end5 && end3) {
        if (end5.genomic_coordinate && end5.genomic_coordinate_position
          && end3.genomic_coordinate && end3.genomic_coordinate_position) {
          return ''; // TODO "long form" coordinates
        }
        const end5String = `${end5.transcript}(${end5.gene.symbol}):exon${end5.exon_number}`;
        const end3String = `${end3.transcript}(${end3.gene.symbol}):exon${end3.exon_number}`;
        return `${end5String}::${end3String}`;
      }
    }
    return '';
  };

  const getGeneID = (symbol) => {
    // TODO: XHR to flask server, retrieve from dynamodb
    return 'hgnc:ZZZZ';
  };

  const transcriptRegionToJSON = (component, index) => {
    const out = {};
    const values = component.componentValues;
    if ('transcript' in values) out.transcript = values.transcript;
    if ('gene_symbol' in values) {
      out.gene = {
        symbol: values.gene_symbol,
        id: getGeneID(values.gene_symbol),
      };
    }
    if (values.exon_end !== '') {
      if (index === 0) {
        out.exon_start = 1;
        out.exon_start_genomic = {
          chr: '<computed>', // TODO
          pos: '<computed>', // TODO
        };
      }
      out.exon_end = values.exon_end;
      out.exon_end_genomic = {
        chr: '<computed>', // TODO
        pos: '<computed>', // TODO
      };
    }
    if (values.exon_start !== '') {
      if (index === components.length) {
        out.exon_end = '<computed>';
        out.exon_end_genomic = {
          chr: '<computed>', // TODO
          pos: '<computed>', // TODO
        };
      }
      out.exon_start = values.exon_start;
      out.exon_start_genomic = {
        chr: '<computed>', // TODO
        pos: '<computed>', // TODO
      };
    }
    return out;
  };

  const genomicRegionToJSON = (component, index) => {
    const out = {};
    const values = component.componentValues;
    if ('chr' in values) out.chr = values.chr;
    if ('strand' in values) out.strand = values.strand;
    if ('start_pos' in values) out.start_pos = values.start_pos;
    if ('end_pos' in values) out.end_pos = values.end_pos;

    return out;
  };

  const linkerSequenceToJSON = (comp) => (
    {
      linker_sequence: comp.componentValues.sequence,
    }
  );

  const handleSubmit = () => {
    const jsonOutput = {};
    
    if (proteinCodingValue === 'Yes') {
      if (rfPreserved === 'Yes') {
        jsonOutput.r_frame_preserved = true;
        if (retainedDomains !== '') { // TODO refactor to allow multiples
          const domain = {
            domain_name: retainedDomains,
            domain_id: '<computed?>', // TODO how to compute? prompt directly?
          };
          if (retainedDomainsGenes !== '') {
            domain.gene = {
              symbol: retainedDomainsGenes,
              id: getGeneID(retainedDomainsGenes)
            };
          }
          jsonOutput.retained_domains = [domain];
        }
      } else if (rfPreserved === 'No') {
        jsonOutput.r_frame_preserved = false;
      }
    }

    jsonOutput.components = components.map((comp, index) => {
      if (comp.componentType === 'transcript_region') {
        return transcriptRegionToJSON(comp, index);
      }
      if (comp.componentType === 'genomic_region') {
        return genomicRegionToJSON(comp, index);
      }
      if (comp.componentType === 'linker_sequence') {
        return linkerSequenceToJSON(comp);
      }
      return null;
    });

    if (causEvent) {
      jsonOutput.causative_event = {
        event_type: causEvent,
      };
    }

    setResponseJSON(JSON.stringify(jsonOutput, null, 2));
    const humanReadable = outputToReadable(jsonOutput);
    if (humanReadable) setResponseReadable(humanReadable);
    setShowResponse(true);
  };

  return (
    <div className={classes.root}>
      <FormRadio
        name="protein-coding"
        prompt="Is at least one partner protein-coding?"
        state={{
          options: ['Yes', 'No', 'Unknown'],
          state: proteinCodingValue,
          stateFunction: handleSetProteinCoding,
        }}
      />
      {showRfPreserved
        ? (
          <FormRadio
            name="rf-preserved"
            prompt="Is the reading frame predicted to be preserved?"
            state={{
              options: ['Yes', 'No'],
              state: rfPreserved,
              stateFunction: handleSetRfPreserved,
            }}
          />
        )
        : null}
      {showFuncDomains
        ? (
          <FunctionalDomainsForm
            setRetainedDomains={setRetainedDomains}
            setRetainedDomainGenes={setRetainedDomainGenes}
          />
        )
        : null}
      {showComponents
        ? (
          <DndProvider backend={HTML5Backend}>
            <ComponentsForm components={components} setComponents={setComponents} />
          </DndProvider>
        )
        : null}
      {showCausEvent
        ? (
          <FormRadio
            name="causative-event"
            prompt="Is causative event known?"
            state={{
              options: ['Yes', 'No'],
              state: causEvent,
              stateFunction: handleSetCausEvent, // TODO
            }}
          />
        )
        : null}
      {showCausEventInfo ? <CausEventForm /> : null}
      {showSubmit ? <SubmitButton handler={handleSubmit} /> : null}
      {showResponse
        ? <ResponseField jsonValue={responseJSON} readableValue={responseHuman} />
        : null}
    </div>
  );
};

export default FormParent;

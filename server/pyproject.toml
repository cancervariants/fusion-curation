[project]
name = "curfu"
authors = [
    {name = "Alex Wagner", email = "alex.wagner@nationwidechildrens.org"},
    {name = "Kori Kuzma", email = "kori.kuzma@nationwidechildrens.org"},
    {name = "James Stevenson", email = "james.stevenson@nationwidechildrens.org"},
    {name = "Katie Stahl", email = "kathryn.stahl@nationwidechildrens.org"},
    {name = "Jeremy Arbesfeld", email = "jeremy.arbesfeld@nationwidechildrens.org"}
]
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10"
description = "Curation tool for gene fusions"
dependencies = [
    "fastapi >= 0.72.0",
    "starlette",
    "jinja2",  # required for file service
    "click",
    "boto3",
    "botocore",
    "fusor ~= 0.3.0",
    "cool-seq-tool ~= 0.7.0",
    "pydantic == 2.4.2",
    "gene-normalizer ~= 0.4.0",
]
dynamic = ["version"]

[project.optional-dependencies]
tests = [
    "pytest",
    "pytest-asyncio >= 0.19.0",
    "pytest-cov",
    "coverage",
    "httpx",
]
dev = [
    "psycopg2-binary",
    "ruff == 0.5.0",
    "black",
    "pre-commit>=3.7.1",
    "pydantic-to-typescript2",
]

[project.scripts]
curfu_devtools = "curfu.cli:devtools"
curfu = "curfu.cli:serve"

[build-system]
requires = ["setuptools>=64", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
root = "../."

[tool.pytest.ini_options]
addopts = "--cov=src --cov-report term-missing"
testpaths = ["tests"]

[tool.ruff]
src = ["curfu"]

[tool.ruff.lint]
select = [
    "F",  # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "E", "W",  # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "I",  # https://docs.astral.sh/ruff/rules/#isort-i
    "N",  # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "D",  # https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "UP",  # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "ANN",  # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
    "ASYNC",  # https://docs.astral.sh/ruff/rules/#flake8-async-async
    "S",  # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "B",  # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "A",  # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "C4",  # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "DTZ",  # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "T10",  # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "EM",  # https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
    "LOG",  # https://docs.astral.sh/ruff/rules/#flake8-logging-log
    "G",  # https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
    "INP",  # https://docs.astral.sh/ruff/rules/#flake8-no-pep420-inp
    "PIE",  # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
    "T20",  # https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "PT",  # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "Q",  # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "RSE",  # https://docs.astral.sh/ruff/rules/#flake8-raise-rse
    "RET",  # https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "SLF",  # https://docs.astral.sh/ruff/rules/#flake8-self-slf
    "SIM",  # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "ARG",  # https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "PTH",  # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "PGH",  # https://docs.astral.sh/ruff/rules/#pygrep-hooks-pgh
    "PERF",  # https://docs.astral.sh/ruff/rules/#perflint-perf
    "FURB",  # https://docs.astral.sh/ruff/rules/#refurb-furb
    "RUF",  # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
]
fixable = [
    "I",
    "F401",
    "D",
    "UP",
    "ANN",
    "B",
    "C4",
    "LOG",
    "G",
    "PIE",
    "PT",
    "RSE",
    "SIM",
    "PERF",
    "FURB",
    "RUF"
]
# ANN003 - missing-type-kwargs
# ANN101 - missing-type-self
# ANN102 - missing-type-cls
# D203 - one-blank-line-before-class
# D205 - blank-line-after-summary
# D206 - indent-with-spaces*
# D213 - multi-line-summary-second-line
# D300 - triple-single-quotes*
# D400 - ends-in-period
# D415 - ends-in-punctuation
# E111 - indentation-with-invalid-multiple*
# E114 - indentation-with-invalid-multiple-comment*
# E117 - over-indented*
# E501 - line-too-long*
# W191 - tab-indentation*
# S321 - suspicious-ftp-lib-usage
# *ignored for compatibility with formatter
ignore = [
    "ANN003", "ANN101", "ANN102",
    "D203", "D205", "D206", "D213", "D300", "D400", "D415",
    "E111", "E114", "E117", "E501",
    "W191",
    "S321",
]

[tool.ruff.lint.per-file-ignores]
# ANN001 - missing-type-function-argument
# ANN2 - missing-return-type
# ANN102 - missing-type-cls
# S101 - assert
# B011 - assert-false
# F401 - unused-import
# N805 - invalid-first-argument-name-for-method
# D301 - escape-sequence-in-docstring
# INP001 - implicit-namespace-package
# ARG001 - unused-function-argument
# B008 - function-call-in-default-argument
# N803 - invalid-argument-name
# N805 - invalid-first-argument-name-for-method
# N815 - mixed-case-variable-in-class-scope
"**/tests/*" = ["ANN001", "ANN2", "ANN102", "S101", "B011", "INP001", "ARG001"]
"*__init__.py" = ["F401"]
"**/src/curfu/schemas.py" = ["ANN201", "N805", "ANN001", "N803", "N805", "N815"]
"**/src/curfu/routers/*" = ["D301", "B008"]
"**/src/curfu/cli.py" = ["D301"]

[tool.ruff.format]
docstring-code-format = true

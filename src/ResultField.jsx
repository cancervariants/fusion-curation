import { React, useState, useEffect } from 'react';
import { Box, TextField } from '@material-ui/core';

const ResultField = ({ fusionJSON }) => {
  const [fusionJSONString, setFusionJSONString] = useState('');
  const [fusionReadable, setFusionReadable] = useState('');

  /**
   * Transform computable fusion object into human-readable string
   * Uses 'hgvs-like' syntax, eg:
   *  NM_152263.2(EPCAM):exon5::NM_002609.3(MSH2):exon2
   *  NM_162263.2(TPM3):exon8::NM_002609.3(PDGFRB):exon11
   * TODO
   *  * CONSIDERABLY more logical detail is needed due to the change from
   *    'junctions' to 'components'
   *  * 'long form' syntax handling
   *  * how differing levels of specificity should be handled
   * @param {Object} outputJSON fusion object generated by handleSubmit()
   * @return {string} fusion object structured as human-readable string
   */
  const outputToReadable = () => {
    if (!fusionJSON.transcript_components) {
      return '';
    }
    const last = fusionJSON.transcript_components.length - 1;
    // eslint-disable-next-line consistent-return
    const formatted = fusionJSON.transcript_components.map((comp, index) => {
      const compType = comp.component_type;

      if (compType === 'transcript_segment') {
        const transcript = (!comp.transcript.includes(':')) ? comp.transcript : comp.transcript.split(':')[1];
        const gene = comp.gene_descriptor.label;
        let exon = '';
        if (index === 0) {
          exon = comp.exon_start.toString();
        } else if (index === last) {
          exon = comp.exon_start.toString();
        } else {
          exon = `${toString(comp.exon_end)}-${toString(comp.exon_end)}`;
        }
        return `${transcript}(${gene}):exon${exon}`;
      }

      if (compType === 'linker_sequence') {
        return comp.linker_sequence.sequence;
      }

      if (compType === 'unknown_gene') {
        return 'unknown';
      }

      if (compType === 'gene') {
        return comp.gene_descriptor.label;
      }

      if (compType === 'genomic_region') {
        return comp.region.label;
      }

      return '';
    });

    return formatted.join('::');
  };

  useEffect(() => {
    setFusionJSONString(JSON.stringify(fusionJSON, null, 2));
    setFusionReadable(outputToReadable());
  }, [fusionJSON]);

  // manage user select/send to clipboard interactions
  const [objectFieldLabel, setObjectFieldLabel] = useState('JSON');
  const [readableFieldLabel, setReadableFieldLabel] = useState('HGVS-like');

  const sleep = (ms) => (
    new Promise((resolve) => setTimeout(resolve, ms))
  );

  // Copy the JSON field to clipboard and notify user
  async function handleObjectFieldClick() {
    if (fusionJSON && fusionJSON !== '') {
      navigator.clipboard.writeText(fusionJSONString);
      setObjectFieldLabel('copied!');
      await sleep(2000);
      setObjectFieldLabel('JSON');
    }
  }

  // Copy readableField to clipboard and notify user
  async function handleReadableFieldClick() {
    if (fusionReadable && fusionReadable !== '') {
      navigator.clipboard.writeText(fusionReadable);
      setReadableFieldLabel('copied!');
      await sleep(2000);
      setReadableFieldLabel('HGVS-like');
    }
  }

  return (
    <>
      <Box p={1}>
        <TextField
          id="response-json"
          label={objectFieldLabel}
          multiline
          variant="outlined"
          InputProps={{
            readOnly: true,
          }}
          value={fusionJSONString}
          onClick={() => handleObjectFieldClick()}
          style={{ width: 700 }}
          rowsMax={14}
        />
      </Box>
      <Box p={1}>
        <TextField
          id="response-hgvs"
          label={readableFieldLabel}
          multiline
          variant="outlined"
          InputProps={{
            readOnly: true,
          }}
          value={fusionReadable}
          onClick={() => handleReadableFieldClick()}
          style={{ width: 700 }}
        />
      </Box>
    </>
  );
};

export default ResultField;
